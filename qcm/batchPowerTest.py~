'''
The purpose of this test is to step through multiple tuning states to try to identify the breakdown voltage at each, and which levels may be broken.  The target operating voltage will be 470 V for each level.

T. Golfinopoulos, 8 June 2015
'''
from MDSplus import *
from numpy import *
from time import sleep

s0=1150608900
Vthresh=470.0

nLevels=80;

sleepTime=0.1 #Time to wait for test shot to run

f_offset=4.0E3 #Offset, f_offset=f_programmed-f_measured

def Rfun(f) :
    fdata=[30219.97329, 32152.64600, 34261.01623, 36193.68894, 38302.05917, 40234.73188, 42167.40460, 44100.07731, 46208.44754, 48141.12025, 50249.49048, 52357.86071, 54290.53342, 56223.20613, 58155.87884, 60264.24907, 62196.92178, 63953.89697, 66062.26720, 67994.93991, 69927.61262, 72035.98285, 73968.65556, 76077.02579, 78009.69850, 79942.37121, 81875.04392, 83983.41415, 85740.38934, 87673.06205, 89605.73476, 91538.40748, 93646.77770, 95579.45042, 97512.12313, 99444.79584, 101377.46855, 103310.14126, 105242.81397, 107175.48668, 109283.85691, 111216.52962, 112973.50481, 114906.17752, 116838.85023, 118947.22046, 120879.89317, 122636.86836, 124745.23859, 126677.91130, 128610.58401, 130543.25673, 132300.23192, 134232.90463, 136341.27486, 138273.94757, 140030.92276, 141963.59547, 144071.96570, 146004.63841, 147761.61360, 149694.28631, 151451.26150, 153559.63173, 155492.30444, 157249.27964, 159181.95235, 160938.92754, 163047.29777, 164804.27296, 166736.94567, 168669.61838, 170426.59357, 172534.96380, 174467.63651, 176224.61170, 178157.28441, 179914.25961, 182022.62984, 183955.30255, 186063.67278, 187820.64797, 190104.71572, 192037.38843, 193970.06114, 195902.73385, 198186.80160, 200119.47431, 202052.14702, 204160.51725, 206093.18996, 208025.86267, 209958.53538, 212066.90561, 213999.57832, 216107.94855, 217864.92374, 219973.29397, 222081.66420, 224014.33691, 225771.31210, 227879.68233, 229812.35504, 231745.02775, 233677.70046, 235961.76821, 237894.44092, 239827.11363, 241584.08883, 243692.45906, 245625.13177, 247557.80448, 249490.47719, 251598.84742, 253531.52013, 255464.19284, 257396.86555, 259153.84074, 261262.21097, 263194.88368, 265127.55639, 267060.22910, 269168.59933, 270925.57452, 272858.24723, 274790.91994, 276899.29017, 278831.96288, 280764.63560, 282521.61079, 284454.28350, 286562.65373, 288495.32644, 290427.99915, 292360.67186, 294293.34457, 296226.01728, 298158.68999, 300091.36270, 301848.33789, 303956.70812, 305889.38083, 307646.35602, 309579.02874, 311687.39896, 313444.37416, 315377.04687, 317309.71958, 319242.39229, 321175.06500, 322932.04019, 324864.71290, 326797.38561, 328730.05832, 330662.73103]
    Rdata=[0.38569, 0.38569, 0.38784, 0.38886, 0.39151, 0.39240, 0.39300, 0.39484, 0.39613, 0.39803, 0.40001, 0.40201, 0.40436, 0.40483, 0.40680, 0.40954, 0.41240, 0.41529, 0.41745, 0.41925, 0.42219, 0.42394, 0.42653, 0.42904, 0.43273, 0.43542, 0.43794, 0.44138, 0.44320, 0.44489, 0.44688, 0.44872, 0.45238, 0.45497, 0.45775, 0.46047, 0.46228, 0.46497, 0.46747, 0.47078, 0.47263, 0.47467, 0.47756, 0.47900, 0.48177, 0.48432, 0.48684, 0.48971, 0.49197, 0.49457, 0.49597, 0.49835, 0.50117, 0.50292, 0.50767, 0.50907, 0.51140, 0.51301, 0.51598, 0.51816, 0.51983, 0.52241, 0.52452, 0.52654, 0.52916, 0.53053, 0.53320, 0.53558, 0.53715, 0.53949, 0.54085, 0.54531, 0.54498, 0.54804, 0.55154, 0.55395, 0.55396, 0.55646, 0.55869, 0.56164, 0.56342, 0.56430, 0.56788, 0.56983, 0.57154, 0.57420, 0.57447, 0.57893, 0.57998, 0.58146, 0.58274, 0.58763, 0.58881, 0.58956, 0.59244, 0.59318, 0.59491, 0.59764, 0.60005, 0.60140, 0.60344, 0.60456, 0.60720, 0.60956, 0.61151, 0.61212, 0.61437, 0.61688, 0.61740, 0.62041, 0.62026, 0.62127, 0.62274, 0.62681, 0.62979, 0.63091, 0.63271, 0.63433, 0.63630, 0.63557, 0.63804, 0.64064, 0.63957, 0.64303, 0.64428, 0.64440, 0.64593, 0.64698, 0.65196, 0.65224, 0.65373, 0.65636, 0.65742, 0.66019, 0.66043, 0.66001, 0.66422, 0.66460, 0.66886, 0.66519, 0.66994, 0.66918, 0.67220, 0.67256, 0.67321, 0.67229, 0.67381, 0.67313, 0.67718, 0.68035, 0.68176, 0.67946, 0.68234, 0.68021, 0.68825]
    return interp(f,fdata,Rdata) #Interpolate resistance values


def Zfun(f) :
    Lmean=5.0468e-06 #Mean antenna inductance, henries
    return Rfun(f)+1j*2.0*pi*f*Lmean

fcsHigh=[272854.73415, 272354.73415, 264702.10185, 260968.30802, 260468.30802, 253197.75376, 246178.28382, 237725.05060, 232281.82225, 228816.72439, 222901.37391, 216919.00128, 211325.80129, 206416.17053, 201095.16452, 195550.56075, 190634.42418, 186081.72054, 181484.82295, 176980.65810, 172416.07978, 168188.28294, 164502.65009, 160501.49602, 156303.79066, 152553.17127, 149041.68471, 145326.48362, 142007.87372, 138861.44827, 136894.56404, 135136.17447, 131780.21790, 128310.83033, 125652.62951, 122703.00207, 119342.16298, 116560.43921, 113552.67078, 110853.84893, 108135.70418, 105243.43246, 102956.55818, 100580.92269, 98007.70760, 95544.48055, 93320.51719, 91407.98445, 89441.53023, 87075.63276, 84928.80473, 83084.23074, 81238.32472, 79329.47312, 77464.15329, 75998.69935, 74256.04358, 72908.47653, 71718.52663, 71218.52663, 69590.81218, 67963.09772, 65923.60440, 63884.11107, 62572.08503, 62072.08503, 61572.08503, 61072.08503, 60572.08503, 60072.08503, 59572.08503, 59072.08503, 58572.08503, 58072.08503, 57572.08503, 56736.44656, 55923.87261, 55133.71730, 54365.35696, 53618.18940]

fcpHigh=[338904.47071, 334434.26354, 329946.88199, 325444.61312, 320929.72326, 316404.45625, 311871.03167, 307331.64317, 302788.45680, 298243.60947, 293699.20737, 289157.32458, 284620.00156, 280089.24389, 275567.02094, 271055.26463, 266555.86831, 262070.68562, 257601.52947, 253150.17107, 243388.68723, 235387.14699, 233611.56416, 231241.98372, 229085.76063, 226251.37706, 221553.21297, 217296.71622, 214635.76745, 211557.70379, 207650.59493, 202554.84378, 199455.89703, 197257.87572, 193272.85507, 189172.67741, 184809.15377, 180795.98733, 176897.37879, 172839.96479, 169141.80992, 165378.90472, 161509.92446, 157824.78326, 153933.86398, 149987.05310, 146220.86034, 142566.22603, 139304.98788, 135731.34964, 132078.63571, 128781.33088, 125501.48625, 122162.54939, 119024.21097, 115822.69256, 112451.57535, 109379.61737, 106426.06543, 103455.83984, 100548.72908, 97620.07276, 94817.24594, 92139.66621, 89379.41046, 86849.44940, 84165.44033, 81717.08091, 79588.59346, 77051.80092, 74805.70184, 72683.87884, 70466.75893, 68562.28274, 66362.19268, 64349.58713, 62657.48739, 60701.21462, 58753.00447, 56792.15231]


for ii in range(0,nLevels):
    if ii==0 :
	fTest=fcpHigh[0]+f_offset+2.0E3
    else :
        fTest=(fcpHigh[ii-1]+fcpHigh[ii])*0.50+f_offset

    iTest=Vthresh/abs(Zfun(fTest))
    pTest=0.5*iTest**2*Rfun(fTest)/2.0 #Divide by 2 because power setting is per each amplifier

    if(pTest>2000.0) :
        pTest=2000.0 #Limit pTest to be <=2000 W/amplifier

    if(fTest-f_offset<82.0E3) :
        break #Only test down to 82 kHz

    powerControlString="Build_Signal("+str(pTest)+" * [0.,0.,0.,1.,0.,0.], *, [-.1, .-:RF_GATE:ON - 10E-6, .-:RF_GATE:ON, .-:RF_GATE:OFF, .-:RF_GATE:OFF + 10E-6, 4.])"
    frequencyControlString="Build_Signal(1000. * [125.,125.,120.,"+(str(fTest/1.0E3)+", ")*3+"100.,125.,125.], *, [-.1, .-:RF_GATE:ON - .1, .-:RF_GATE:ON - .05, .-:RF_GATE:ON, .5 * (.-:RF_GATE:OFF + .-:RF_GATE:ON), .-:RF_GATE:OFF, 1.5, 4.])"

    print("ii="+str(ii)+", fTest="+str(fTest/1.0E3)+" kHz, iTest="+str(iTest)+" A, pTest="+str(pTest)+" W/amplifier")
    print(powerControlString)
    print(frequencyControlString)
    print("--------------------------")

    #Call test shot

    #Wait for test shot to finish
    sleep(sleepTime)
